import logging
import os
import re
import io
from datetime import datetime
from typing import List
import tempfile
import yagmail
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile, Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from docx import Document
from docx.shared import Inches, Pt
from docx.oxml.ns import qn

def convert_to_pdf(docx_path, pdf_path):
    doc = aw.Document(docx_path)
    doc.save(pdf_path)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 
API_TOKEN = "8332637912:AAFcZEMZspHLpNU2EQ_tm2crPnwNF3Irk10"
TEMPLATE_PATH = "act.docx"
SMTP_LOGIN = "qxxntxm30@gmail.com"
SMTP_PASSWORD = "urhsobfnzpnscdqn"  # –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
GROUP_ID =-4630725474 # ID –≥—Ä—É–ø–ø—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å 0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è 
class ActState(StatesGroup):
    waiting_block = State()
    waiting_description = State()
    waiting_photos = State()
    ask_more = State()
    waiting_destination = State()
    waiting_email = State()
    done = State()

class Damage:
    def __init__(self, block: str, desc: str, photos: List[str]):
        self.block = block
        self.description = desc
        self.photos = photos

def get_main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ù–∞—á–∞—Ç—å –∞–∫—Ç", callback_data="start_act")]
    ])

def photo_done_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="finish_photos")]
    ])

def get_destination_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìß –ù–∞ –ø–æ—á—Ç—É", callback_data="send_email"),
            InlineKeyboardButton(text="üì± –í –≥—Ä—É–ø–ø—É", callback_data="send_group")
        ],
        [InlineKeyboardButton(text="üìßüì± –ù–∞ –ø–æ—á—Ç—É –∏ –≤ –≥—Ä—É–ø–ø—É", callback_data="send_both")],
        [InlineKeyboardButton(text="üö´ –ù–∏–∫—É–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å", callback_data="send_none")]
    ])

async def ask_destination(message: Message, state: FSMContext):
    await message.answer("–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–∫—Ç?", reply_markup=get_destination_kb())
    await state.set_state(ActState.waiting_destination)

# Handlers
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∞.", reply_markup=get_main_menu())

@dp.callback_query(F.data == "start_act")
async def handle_start_act(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ ‚Ññ (–ë–ª–æ–∫-–ü–æ–º–µ—â–µ–Ω–∏–µ):")
    await state.set_state(ActState.waiting_block)
    await callback.answer()

@dp.message(ActState.waiting_block)
async def get_block(message: Message, state: FSMContext):
    block = message.text.strip()
    if not block:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –±–ª–æ–∫ (–ø–æ–º–µ—â–µ–Ω–∏–µ):")
        return
    await state.update_data(current_block=block)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è:")
    await state.set_state(ActState.waiting_description)

@dp.message(ActState.waiting_description)
async def get_description(message: Message, state: FSMContext):
    desc = message.text.strip()
    if not desc:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è:")
        return
    await state.update_data(current_description=desc, current_photos=[])
    await message.answer(
        "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ü–æ—Å–ª–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=photo_done_kb()
    )
    await state.set_state(ActState.waiting_photos)

@dp.message(ActState.waiting_photos, F.photo)
async def get_photos(message: Message, state: FSMContext):
    data = await state.get_data()
    photo_list = data.get("current_photos", [])
    if len(photo_list) >= 10:  # MAX_PHOTOS_PER_BLOCK
        await message.answer(f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º ‚Äî 10 —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ñ–æ—Ç–æ¬ª.")
        return
    file_id = message.photo[-1].file_id
    photo_list.append(file_id)
    await state.update_data(current_photos=photo_list)
    await message.answer(f"‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –í—Å–µ–≥–æ: {len(photo_list)}.")

@dp.callback_query(F.data == "finish_photos")
async def on_finish_photos(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    photos = data.get("current_photos", [])
    if not photos:
        await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.", show_alert=True)
        return

    damage = Damage(data["current_block"], data["current_description"], photos)
    damages = data.get("damages", [])
    damages.append(damage)
    await state.update_data(
        damages=damages,
        current_block=None,
        current_description=None,
        current_photos=[]
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–º–µ—â–µ–Ω–∏–µ", callback_data="add_block")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–∫—Ç", callback_data="finish_act")]
    ])
    await state.set_state(ActState.ask_more)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    await callback.answer()

@dp.callback_query(F.data.in_({"add_block", "finish_act"}))
async def handle_next_step(callback: CallbackQuery, state: FSMContext):
    if callback.data == "add_block":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ‚Ññ (–ë–ª–æ–∫-–ü–æ–º–µ—â–µ–Ω–∏–µ):")
        await state.set_state(ActState.waiting_block)
    elif callback.data == "finish_act":
        await ask_destination(callback.message, state)
    await callback.answer()

@dp.callback_query(ActState.waiting_destination, F.data.startswith("send_"))
async def handle_destination(callback: CallbackQuery, state: FSMContext):
    action = callback.data
    await state.update_data(send_action=action)
    
    data = await state.get_data()
    
    if action in ["send_email", "send_both"] and not data.get("email"):
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
        await state.set_state(ActState.waiting_email)
    else:
        await state.set_state(ActState.done)
        await generate_and_send_act(callback.message, state)
    
    await callback.answer()

@dp.message(ActState.waiting_email)
async def get_email(message: Message, state: FSMContext):
    email = message.text.strip()
    if not re.match(r"^[\w\.-]+@[\w\.-]+\.\w+$", email):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    
    await state.update_data(email=email)
    await state.set_state(ActState.done)
    await generate_and_send_act(message, state)

async def generate_and_send_act(message: Message, state: FSMContext):
    data = await state.get_data()
    damages = data.get("damages", [])
    
    if not damages:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    doc = Document(TEMPLATE_PATH)
    
    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
    for para in doc.paragraphs:
        if "–í —Ö–æ–¥–µ –æ—Å–º–æ—Ç—Ä–∞ –±—ã–ª–∏ –≤—ã—è–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è" in para.text:
            para.clear()
            run = para.add_run("–í —Ö–æ–¥–µ –æ—Å–º–æ—Ç—Ä–∞ –±—ã–ª–∏ –≤—ã—è–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è:\n")
            run.font.name = 'Times New Roman'
            run.font.size = Pt(12)
            for idx, d in enumerate(damages, 1):
                run = para.add_run(f"{idx}. –ë–ª–æ–∫ {d.block} ‚Äî {d.description}\n")
                run.font.name = 'Times New Roman'
                run.font.size = Pt(12)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    for d in damages:
        doc.add_page_break()
        doc.add_paragraph(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Ññ1 –∫ –∞–∫—Ç—É –æ—Ç {datetime.today().strftime('%d.%m.%Y')}")
        doc.add_paragraph(d.block)
        for pid in d.photos:
            try:
                file = await bot.get_file(pid)
                file_data = await bot.download(file.file_id)
                doc.add_picture(io.BytesIO(file_data.read()), width=Inches(4))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ DOCX
    filename = f"–∞–∫—Ç_{datetime.today().strftime('%d%m%Y_%H%M%S')}.docx"
    temp_path_docx = os.path.join(tempfile.gettempdir(), filename)
    doc.save(temp_path_docx)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ DOCX —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer_document(FSInputFile(temp_path_docx), caption="‚úÖ –ê–∫—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω.")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    action = data.get("send_action", "send_none")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    if action in ["send_group", "send_both"] and GROUP_ID != 0:
        try:
            await bot.send_document(
                chat_id=GROUP_ID, 
                document=FSInputFile(temp_path_docx), 
                caption=f"üìÑ –ù–æ–≤—ã–π –∞–∫—Ç –¥–µ—Ñ–µ–∫—Ç–æ–≤–∫–∏ –æ—Ç @{message.from_user.username}"
            )
            await message.answer(f"‚úÖ –ê–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {GROUP_ID}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–∫—Ç –≤ –≥—Ä—É–ø–ø—É")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–æ—á—Ç—É
    if action in ["send_email", "send_both"] and data.get("email"):
        try:
            yag = yagmail.SMTP(SMTP_LOGIN, SMTP_PASSWORD)
            yag.send(
                to=data["email"],
                subject=f"–ê–∫—Ç –¥–µ—Ñ–µ–∫—Ç–æ–≤–∫–∏ {datetime.today().strftime('%d.%m.%Y')}",
                contents="–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∞–∫—Ç –æ—Å–º–æ—Ç—Ä–∞.",
                attachments=temp_path_docx  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ DOCX
            )
            await message.answer(f"üìß –ê–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {data['email']}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ {data['email']}")

    await state.clear()
    await message.answer("üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())


if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
